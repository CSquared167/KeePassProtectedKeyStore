<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDataStoreExceptionMessage" xml:space="preserve">
    <value>Error {0} file:

{1}.</value>
  </data>
  <data name="CreatePasswordWeak" xml:space="preserve">
    <value>The specified password is weak. Do you wish to use it anyway?</value>
  </data>
  <data name="EmergencyRecoveryFileImportError" xml:space="preserve">
    <value>Unable to import {0} emergency key recovery file:

{1}.</value>
  </data>
  <data name="EmergencyRecoveryKeyFileBadFormat" xml:space="preserve">
    <value>Input file is not a valid {0} emergency key recovery file</value>
  </data>
  <data name="EmergencyRecoveryKeyFileCorrupt" xml:space="preserve">
    <value>The emergency key recovery file has been corrupted or altered.  It cannot be used to create a protected key store.</value>
  </data>
  <data name="EmergencyRecoveryKeyFileCreated" xml:space="preserve">
    <value>{0} created.

NOTE: Although this file contains encrypted data, anyone getting a hold of it and your database can import it and open your database. Please keep it in a safe location where it is unlikely to be found by anyone else but you.</value>
  </data>
  <data name="EmergencyRecoveryKeyFileCreatedUserEncryption" xml:space="preserve">
    <value>{0} created.</value>
  </data>
  <data name="EmergencyRecoveryKeyFileCreateFailed" xml:space="preserve">
    <value>Failed to create {0}:

{1}.</value>
  </data>
  <data name="EmergencyRecoveryKeyFileFilter" xml:space="preserve">
    <value>{0} Emergency Key Recovery Files (*.xml)|*.xml|All files (*.*)|*.*</value>
  </data>
  <data name="KeePassFileFilter" xml:space="preserve">
    <value>KeePass KDBX Files (*.kdbx)|*.kdbx|All files (*.*)|*.*</value>
  </data>
  <data name="KeyFileProviderWarning" xml:space="preserve">
    <value>The existing key/file provider "{0}" must be converted, because {1} is a key provider, and KeePass supports only one key/file provider per database. You will not be allowed to deselect this authentication key.</value>
  </data>
  <data name="OverwriteProtectedKeyStoreFilePrompt" xml:space="preserve">
    <value>A protected key store file already exists for this database. Do you wish to overwrite it?</value>
  </data>
  <data name="ProtectedKeyStoreCreatedAfterConversion" xml:space="preserve">
    <value>Protected key store successfully created!

The next time you login to the database, you can deselect the authentication key(s) you just converted and select the "{0}" option under "Key file/provider".

Do you wish to create an emergency key recovery file, in case you lose the protected key store you just created?</value>
  </data>
  <data name="ProtectedKeyStoreCreatedAfterImport" xml:space="preserve">
    <value>Protected key store successfully created!

The next time you login to the database, you can select the "{0}" option under "Key file/provider".</value>
  </data>
  <data name="ProtectedKeyStoreCreatedNew" xml:space="preserve">
    <value>Protected key store successfully created!

It is highly recommended to create an emergency key recovery file, otherwise you will not be able to login to this database again if you lose the protected key store you just created. Do you wish to create an emergency key recovery file now?</value>
  </data>
  <data name="ProtectedKeyStoreCreateError" xml:space="preserve">
    <value>Unable to create protected key store:

{0}.</value>
  </data>
  <data name="ProtectedKeyStoreDecryptError" xml:space="preserve">
    <value>Unable to decrypt protected key store file:

{0}.</value>
  </data>
</root>