//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KeePassProtectedKeyStore.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KeePassProtectedKeyStore.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error {0} file:
        ///
        ///{1}..
        /// </summary>
        internal static string AppDataStoreExceptionMessage {
            get {
                return ResourceManager.GetString("AppDataStoreExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified password is weak. Do you wish to use it anyway?.
        /// </summary>
        internal static string CreatePasswordWeak {
            get {
                return ResourceManager.GetString("CreatePasswordWeak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to import {0} emergency key recovery file:
        ///
        ///{1}..
        /// </summary>
        internal static string EmergencyRecoveryFileImportError {
            get {
                return ResourceManager.GetString("EmergencyRecoveryFileImportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input file is not a valid {0} emergency key recovery file.
        /// </summary>
        internal static string EmergencyRecoveryKeyFileBadFormat {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileBadFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The emergency key recovery file has been corrupted or altered.  It cannot be used to create a protected key store..
        /// </summary>
        internal static string EmergencyRecoveryKeyFileCorrupt {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} created.
        ///
        ///NOTE: Although this file contains encrypted data, anyone getting a hold of it and your database can import it and open your database. Please keep it in a safe location where it is unlikely to be found by anyone else but you..
        /// </summary>
        internal static string EmergencyRecoveryKeyFileCreated {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} created..
        /// </summary>
        internal static string EmergencyRecoveryKeyFileCreatedUserEncryption {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileCreatedUserEncryption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create {0}:
        ///
        ///{1}..
        /// </summary>
        internal static string EmergencyRecoveryKeyFileCreateFailed {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileCreateFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} Emergency Key Recovery Files (*.xml)|*.xml|All files (*.*)|*.*.
        /// </summary>
        internal static string EmergencyRecoveryKeyFileFilter {
            get {
                return ResourceManager.GetString("EmergencyRecoveryKeyFileFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KeePass KDBX Files (*.kdbx)|*.kdbx|All files (*.*)|*.*.
        /// </summary>
        internal static string KeePassFileFilter {
            get {
                return ResourceManager.GetString("KeePassFileFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The existing key/file provider &quot;{0}&quot; must be converted, because {1} is a key provider, and KeePass supports only one key/file provider per database. You will not be allowed to deselect this authentication key..
        /// </summary>
        internal static string KeyFileProviderWarning {
            get {
                return ResourceManager.GetString("KeyFileProviderWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A protected key store file already exists for this database. Do you wish to overwrite it?.
        /// </summary>
        internal static string OverwriteProtectedKeyStoreFilePrompt {
            get {
                return ResourceManager.GetString("OverwriteProtectedKeyStoreFilePrompt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protected key store successfully created!
        ///
        ///The next time you login to the database, you can deselect the authentication key(s) you just converted and select the &quot;{0}&quot; option under &quot;Key file/provider&quot;.
        ///
        ///Do you wish to create an emergency key recovery file, in case you lose the protected key store you just created?.
        /// </summary>
        internal static string ProtectedKeyStoreCreatedAfterConversion {
            get {
                return ResourceManager.GetString("ProtectedKeyStoreCreatedAfterConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protected key store successfully created!
        ///
        ///The next time you login to the database, you can select the &quot;{0}&quot; option under &quot;Key file/provider&quot;..
        /// </summary>
        internal static string ProtectedKeyStoreCreatedAfterImport {
            get {
                return ResourceManager.GetString("ProtectedKeyStoreCreatedAfterImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Protected key store successfully created!
        ///
        ///It is highly recommended to create an emergency key recovery file, otherwise you will not be able to login to this database again if you lose the protected key store you just created. Do you wish to create an emergency key recovery file now?.
        /// </summary>
        internal static string ProtectedKeyStoreCreatedNew {
            get {
                return ResourceManager.GetString("ProtectedKeyStoreCreatedNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to create protected key store:
        ///
        ///{0}..
        /// </summary>
        internal static string ProtectedKeyStoreCreateError {
            get {
                return ResourceManager.GetString("ProtectedKeyStoreCreateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to decrypt protected key store file:
        ///
        ///{0}..
        /// </summary>
        internal static string ProtectedKeyStoreDecryptError {
            get {
                return ResourceManager.GetString("ProtectedKeyStoreDecryptError", resourceCulture);
            }
        }
    }
}
